# Configuration for dev

version: '3.4'

services:
    nginx:
        restart: always
        image: nginx:1.17
        expose:
            - 8000
        ports:
            - "80:8000"
            - "443:443"
        command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
        volumes:
            - ./apn-app/static:/srv/www/apn-app/static # Backend part
            - ./apn-app/media:/srv/www/apn-app/media # Backend part
            - ./apn-ui/dist:/srv/www/apn-ui
            - ./docker/nginx:/etc/nginx/conf.d
            - ./docker/certbot/conf:/etc/letsencrypt
            - ./docker/certbot/www:/var/www/certbot
        depends_on:
            - apn-app
            - apn-ui
            - certbot

    certbot:
        image: certbot/certbot
        entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
        volumes:
            - ./docker/certbot/conf:/etc/letsencrypt
            - ./docker/certbot/www:/var/www/certbot

    apn-app:
        restart: always
        build:
            context: ./apn-app/
            dockerfile: docker/python/Dockerfile
        volumes:
            - ./apn-app/:/srv/www/apn-app
        links:
          - apn-postgres:apn-postgres
        expose:
          - 8000
        ports:
            - 8000:8000
        env_file:
            - .env
        depends_on:
            - apn-postgres
        stdin_open: true
        tty: true
        command: "gunicorn -c gunicorn.py config.wsgi"

    apn-postgres:
        image: postgres:13-alpine
        restart: always
        ports:
            - "5432:5432"
        environment:
            POSTGRES_DB: "${POSTGRES_DB}"
            POSTGRES_USER: "${POSTGRES_USER}"
            POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
        volumes:
            - pgdata:/var/lib/postgresql/data
            - ./apn-app/logs:/srv/www/apn-app/logs

    apn-ui:
        build:
          context: ./apn-ui
          dockerfile: docker/vuejs/Dockerfile
          target: 'build-stage' # just build our dist/ code
        # ports:
        # - '8080:8080'
        env_file:
            - .env
        volumes:
            - ./apn-ui/:/app
            - node_modules:/app/node_modules
        entrypoint: [ "/bin/sh", "-c", "yarn build"]

volumes:
    pgdata:
    node_modules:



